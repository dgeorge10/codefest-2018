/**
 * Lyft API
 * Drive your app to success with Lyft's API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.lyft);
  }
}(this, function(expect, lyft) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new lyft.RideDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RideDetail', function() {
    it('should create an instance of RideDetail', function() {
      // uncomment below and update the code to test RideDetail
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be.a(lyft.RideDetail);
    });

    it('should have the property rideId (base name: "ride_id")', function() {
      // uncomment below and update the code to test the property rideId
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property rideType (base name: "ride_type")', function() {
      // uncomment below and update the code to test the property rideType
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property passenger (base name: "passenger")', function() {
      // uncomment below and update the code to test the property passenger
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property driver (base name: "driver")', function() {
      // uncomment below and update the code to test the property driver
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property vehicle (base name: "vehicle")', function() {
      // uncomment below and update the code to test the property vehicle
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property pickup (base name: "pickup")', function() {
      // uncomment below and update the code to test the property pickup
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property dropoff (base name: "dropoff")', function() {
      // uncomment below and update the code to test the property dropoff
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property primetimePercentage (base name: "primetime_percentage")', function() {
      // uncomment below and update the code to test the property primetimePercentage
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property distanceMiles (base name: "distance_miles")', function() {
      // uncomment below and update the code to test the property distanceMiles
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property durationSeconds (base name: "duration_seconds")', function() {
      // uncomment below and update the code to test the property durationSeconds
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property lineItems (base name: "line_items")', function() {
      // uncomment below and update the code to test the property lineItems
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property canCancel (base name: "can_cancel")', function() {
      // uncomment below and update the code to test the property canCancel
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property canceledBy (base name: "canceled_by")', function() {
      // uncomment below and update the code to test the property canceledBy
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property cancellationPrice (base name: "cancellation_price")', function() {
      // uncomment below and update the code to test the property cancellationPrice
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property feedback (base name: "feedback")', function() {
      // uncomment below and update the code to test the property feedback
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property pricingDetailsUrl (base name: "pricing_details_url")', function() {
      // uncomment below and update the code to test the property pricingDetailsUrl
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property routeUrl (base name: "route_url")', function() {
      // uncomment below and update the code to test the property routeUrl
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property requestedAt (base name: "requested_at")', function() {
      // uncomment below and update the code to test the property requestedAt
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property generatedAt (base name: "generated_at")', function() {
      // uncomment below and update the code to test the property generatedAt
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property rideProfile (base name: "ride_profile")', function() {
      // uncomment below and update the code to test the property rideProfile
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

    it('should have the property beaconColor (base name: "beacon_color")', function() {
      // uncomment below and update the code to test the property beaconColor
      //var instane = new lyft.RideDetail();
      //expect(instance).to.be();
    });

  });

}));
