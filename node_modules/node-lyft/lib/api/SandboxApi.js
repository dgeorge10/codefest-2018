'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
yft API
rive your app to success with Lyft's API

penAPI spec version: 1.0.0
ontact: api-support@lyft.com

his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ApiError = require('../model/ApiError');

var _ApiError2 = _interopRequireDefault(_ApiError);

var _SandboxDriverAvailability = require('../model/SandboxDriverAvailability');

var _SandboxDriverAvailability2 = _interopRequireDefault(_SandboxDriverAvailability);

var _SandboxPrimetime = require('../model/SandboxPrimetime');

var _SandboxPrimetime2 = _interopRequireDefault(_SandboxPrimetime);

var _SandboxRideStatus = require('../model/SandboxRideStatus');

var _SandboxRideStatus2 = _interopRequireDefault(_SandboxRideStatus);

var _SandboxRideType = require('../model/SandboxRideType');

var _SandboxRideType2 = _interopRequireDefault(_SandboxRideType);

var _SandboxRideUpdate = require('../model/SandboxRideUpdate');

var _SandboxRideUpdate2 = _interopRequireDefault(_SandboxRideUpdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Sandbox service.
* @module api/SandboxApi
* @version 1.0.0
*/
var SandboxApi = function () {

  /**
  * Constructs a new SandboxApi. 
  * @alias module:api/SandboxApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SandboxApi(apiClient) {
    _classCallCheck(this, SandboxApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Preset Prime Time percentage
   * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
   * @param {module:model/SandboxPrimetime} request Prime Time to be preset in the region surrounding the lat, lng
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(SandboxApi, [{
    key: 'setPrimeTimeWithHttpInfo',
    value: function setPrimeTimeWithHttpInfo(request) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setPrimeTime");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi('/sandbox/primetime', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param {module:model/SandboxPrimetime} request Prime Time to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'setPrimeTime',
    value: function setPrimeTime(request) {
      return this.setPrimeTimeWithHttpInfo(request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param {String} id The ID of the ride
     * @param {module:model/SandboxRideStatus} request status to propagate the ride into
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SandboxRideUpdate} and HTTP response
     */

  }, {
    key: 'setRideStatusWithHttpInfo',
    value: function setRideStatusWithHttpInfo(id, request) {
      var postBody = request;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideStatus");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideStatus");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SandboxRideUpdate2.default;

      return this.apiClient.callApi('/sandbox/rides/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param {String} id The ID of the ride
     * @param {module:model/SandboxRideStatus} request status to propagate the ride into
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SandboxRideUpdate}
     */

  }, {
    key: 'setRideStatus',
    value: function setRideStatus(id, request) {
      return this.setRideStatusWithHttpInfo(id, request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param {module:model/String} rideType 
     * @param {module:model/SandboxDriverAvailability} request Driver availability to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'setRideTypeAvailabilityWithHttpInfo',
    value: function setRideTypeAvailabilityWithHttpInfo(rideType, request) {
      var postBody = request;

      // verify the required parameter 'rideType' is set
      if (rideType === undefined || rideType === null) {
        throw new Error("Missing the required parameter 'rideType' when calling setRideTypeAvailability");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypeAvailability");
      }

      var pathParams = {
        'ride_type': rideType
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi('/sandbox/ridetypes/{ride_type}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param {module:model/String} rideType 
     * @param {module:model/SandboxDriverAvailability} request Driver availability to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'setRideTypeAvailability',
    value: function setRideTypeAvailability(rideType, request) {
      return this.setRideTypeAvailabilityWithHttpInfo(rideType, request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param {module:model/SandboxRideType} request Ridetypes to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SandboxRideType} and HTTP response
     */

  }, {
    key: 'setRideTypesWithHttpInfo',
    value: function setRideTypesWithHttpInfo(request) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypes");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SandboxRideType2.default;

      return this.apiClient.callApi('/sandbox/ridetypes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param {module:model/SandboxRideType} request Ridetypes to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SandboxRideType}
     */

  }, {
    key: 'setRideTypes',
    value: function setRideTypes(request) {
      return this.setRideTypesWithHttpInfo(request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return SandboxApi;
}();

exports.default = SandboxApi;