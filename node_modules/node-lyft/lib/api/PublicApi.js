'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
yft API
rive your app to success with Lyft's API

penAPI spec version: 1.0.0
ontact: api-support@lyft.com

his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ApiError = require('../model/ApiError');

var _ApiError2 = _interopRequireDefault(_ApiError);

var _CostEstimateResponse = require('../model/CostEstimateResponse');

var _CostEstimateResponse2 = _interopRequireDefault(_CostEstimateResponse);

var _EtaEstimateResponse = require('../model/EtaEstimateResponse');

var _EtaEstimateResponse2 = _interopRequireDefault(_EtaEstimateResponse);

var _NearbyDriversResponse = require('../model/NearbyDriversResponse');

var _NearbyDriversResponse2 = _interopRequireDefault(_NearbyDriversResponse);

var _RideTypesResponse = require('../model/RideTypesResponse');

var _RideTypesResponse2 = _interopRequireDefault(_RideTypesResponse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Public service.
* @module api/PublicApi
* @version 1.0.0
*/
var PublicApi = function () {

  /**
  * Constructs a new PublicApi. 
  * @alias module:api/PublicApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PublicApi(apiClient) {
    _classCallCheck(this, PublicApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Cost estimates
   * Estimate the cost of taking a Lyft between two points. 
   * @param {Number} startLat Latitude of the starting location
   * @param {Number} startLng Longitude of the starting location
   * @param {Object} opts Optional parameters
   * @param {module:model/String} opts.rideType ID of a ride type
   * @param {Number} opts.endLat Latitude of the ending location
   * @param {Number} opts.endLng Longitude of the ending location
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CostEstimateResponse} and HTTP response
   */


  _createClass(PublicApi, [{
    key: 'getCostWithHttpInfo',
    value: function getCostWithHttpInfo(startLat, startLng, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'startLat' is set
      if (startLat === undefined || startLat === null) {
        throw new Error("Missing the required parameter 'startLat' when calling getCost");
      }

      // verify the required parameter 'startLng' is set
      if (startLng === undefined || startLng === null) {
        throw new Error("Missing the required parameter 'startLng' when calling getCost");
      }

      var pathParams = {};
      var queryParams = {
        'ride_type': opts['rideType'],
        'start_lat': startLat,
        'start_lng': startLng,
        'end_lat': opts['endLat'],
        'end_lng': opts['endLng']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CostEstimateResponse2.default;

      return this.apiClient.callApi('/cost', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cost estimates
     * Estimate the cost of taking a Lyft between two points. 
     * @param {Number} startLat Latitude of the starting location
     * @param {Number} startLng Longitude of the starting location
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.rideType ID of a ride type
     * @param {Number} opts.endLat Latitude of the ending location
     * @param {Number} opts.endLng Longitude of the ending location
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CostEstimateResponse}
     */

  }, {
    key: 'getCost',
    value: function getCost(startLat, startLng, opts) {
      return this.getCostWithHttpInfo(startLat, startLng, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NearbyDriversResponse} and HTTP response
     */

  }, {
    key: 'getDriversWithHttpInfo',
    value: function getDriversWithHttpInfo(lat, lng) {
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getDrivers");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getDrivers");
      }

      var pathParams = {};
      var queryParams = {
        'lat': lat,
        'lng': lng
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NearbyDriversResponse2.default;

      return this.apiClient.callApi('/drivers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NearbyDriversResponse}
     */

  }, {
    key: 'getDrivers',
    value: function getDrivers(lat, lng) {
      return this.getDriversWithHttpInfo(lat, lng).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Pickup ETAs
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {Number} opts.destinationLat Latitude of destination location
     * @param {Number} opts.destinationLng Longitude of destination location
     * @param {module:model/String} opts.rideType ID of a ride type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EtaEstimateResponse} and HTTP response
     */

  }, {
    key: 'getETAWithHttpInfo',
    value: function getETAWithHttpInfo(lat, lng, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getETA");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getETA");
      }

      var pathParams = {};
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'destination_lat': opts['destinationLat'],
        'destination_lng': opts['destinationLng'],
        'ride_type': opts['rideType']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EtaEstimateResponse2.default;

      return this.apiClient.callApi('/eta', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Pickup ETAs
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {Number} opts.destinationLat Latitude of destination location
     * @param {Number} opts.destinationLng Longitude of destination location
     * @param {module:model/String} opts.rideType ID of a ride type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EtaEstimateResponse}
     */

  }, {
    key: 'getETA',
    value: function getETA(lat, lng, opts) {
      return this.getETAWithHttpInfo(lat, lng, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Types of rides
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.rideType ID of a ride type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RideTypesResponse} and HTTP response
     */

  }, {
    key: 'getRideTypesWithHttpInfo',
    value: function getRideTypesWithHttpInfo(lat, lng, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getRideTypes");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getRideTypes");
      }

      var pathParams = {};
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'ride_type': opts['rideType']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['Client Authentication', 'User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RideTypesResponse2.default;

      return this.apiClient.callApi('/ridetypes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Types of rides
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.rideType ID of a ride type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RideTypesResponse}
     */

  }, {
    key: 'getRideTypes',
    value: function getRideTypes(lat, lng, opts) {
      return this.getRideTypesWithHttpInfo(lat, lng, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PublicApi;
}();

exports.default = PublicApi;