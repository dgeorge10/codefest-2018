'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Lyft API
rive your app to success with Lyft's API

penAPI spec version: 1.0.0
ontact: api-support@lyft.com

his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ApiError = require('../model/ApiError');

var _ApiError2 = _interopRequireDefault(_ApiError);

var _CancellationCostError = require('../model/CancellationCostError');

var _CancellationCostError2 = _interopRequireDefault(_CancellationCostError);

var _CancellationRequest = require('../model/CancellationRequest');

var _CancellationRequest2 = _interopRequireDefault(_CancellationRequest);

var _Location = require('../model/Location');

var _Location2 = _interopRequireDefault(_Location);

var _Profile = require('../model/Profile');

var _Profile2 = _interopRequireDefault(_Profile);

var _RatingRequest = require('../model/RatingRequest');

var _RatingRequest2 = _interopRequireDefault(_RatingRequest);

var _Ride = require('../model/Ride');

var _Ride2 = _interopRequireDefault(_Ride);

var _RideDetail = require('../model/RideDetail');

var _RideDetail2 = _interopRequireDefault(_RideDetail);

var _RideReceipt = require('../model/RideReceipt');

var _RideReceipt2 = _interopRequireDefault(_RideReceipt);

var _RideRequest = require('../model/RideRequest');

var _RideRequest2 = _interopRequireDefault(_RideRequest);

var _RideRequestError = require('../model/RideRequestError');

var _RideRequestError2 = _interopRequireDefault(_RideRequestError);

var _RidesResponse = require('../model/RidesResponse');

var _RidesResponse2 = _interopRequireDefault(_RidesResponse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
var UserApi = function () {

  /**
  * Constructs a new UserApi. 
  * @alias module:api/UserApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function UserApi(apiClient) {
    _classCallCheck(this, UserApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Cancel a ongoing requested ride
   * Cancel a ongoing ride which was requested earlier by providing the ride id. 
   * @param {String} id The ID of the ride
   * @param {Object} opts Optional parameters
   * @param {module:model/CancellationRequest} opts.request 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(UserApi, [{
    key: 'cancelRideWithHttpInfo',
    value: function cancelRideWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRide");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi('/rides/{id}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cancel a ongoing requested ride
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     * @param {String} id The ID of the ride
     * @param {Object} opts Optional parameters
     * @param {module:model/CancellationRequest} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'cancelRide',
    value: function cancelRide(id, opts) {
      return this.cancelRideWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * The user&#39;s general info
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Profile} and HTTP response
     */

  }, {
    key: 'getProfileWithHttpInfo',
    value: function getProfileWithHttpInfo() {
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Profile2.default;

      return this.apiClient.callApi('/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * The user&#39;s general info
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Profile}
     */

  }, {
    key: 'getProfile',
    value: function getProfile() {
      return this.getProfileWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param {String} id The ID of the ride
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RideDetail} and HTTP response
     */

  }, {
    key: 'getRideWithHttpInfo',
    value: function getRideWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRide");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RideDetail2.default;

      return this.apiClient.callApi('/rides/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param {String} id The ID of the ride
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RideDetail}
     */

  }, {
    key: 'getRide',
    value: function getRide(id) {
      return this.getRideWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param {String} id The ID of the ride
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RideReceipt} and HTTP response
     */

  }, {
    key: 'getRideReceiptWithHttpInfo',
    value: function getRideReceiptWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRideReceipt");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RideReceipt2.default;

      return this.apiClient.callApi('/rides/{id}/receipt', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param {String} id The ID of the ride
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RideReceipt}
     */

  }, {
    key: 'getRideReceipt',
    value: function getRideReceipt(id) {
      return this.getRideReceiptWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List rides
     * Get a list of past &amp; current rides for this passenger. 
     * @param {Date} startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Number} opts.limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RidesResponse} and HTTP response
     */

  }, {
    key: 'getRidesWithHttpInfo',
    value: function getRidesWithHttpInfo(startTime, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getRides");
      }

      var pathParams = {};
      var queryParams = {
        'start_time': startTime,
        'end_time': opts['endTime'],
        'limit': opts['limit']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RidesResponse2.default;

      return this.apiClient.callApi('/rides', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * List rides
     * Get a list of past &amp; current rides for this passenger. 
     * @param {Date} startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Number} opts.limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RidesResponse}
     */

  }, {
    key: 'getRides',
    value: function getRides(startTime, opts) {
      return this.getRidesWithHttpInfo(startTime, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     * @param {module:model/Ride} request Ride request information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RideRequest} and HTTP response
     */

  }, {
    key: 'newRideWithHttpInfo',
    value: function newRideWithHttpInfo(request) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling newRide");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RideRequest2.default;

      return this.apiClient.callApi('/rides', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     * @param {module:model/Ride} request Ride request information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RideRequest}
     */

  }, {
    key: 'newRide',
    value: function newRide(request) {
      return this.newRideWithHttpInfo(request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update the destination of the ride
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param {String} id The ID of the ride
     * @param {module:model/Location} request The coordinates and optional address of the destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Location} and HTTP response
     */

  }, {
    key: 'setRideDestinationWithHttpInfo',
    value: function setRideDestinationWithHttpInfo(id, request) {
      var postBody = request;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideDestination");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideDestination");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Location2.default;

      return this.apiClient.callApi('/rides/{id}/destination', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update the destination of the ride
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param {String} id The ID of the ride
     * @param {module:model/Location} request The coordinates and optional address of the destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Location}
     */

  }, {
    key: 'setRideDestination',
    value: function setRideDestination(id, request) {
      return this.setRideDestinationWithHttpInfo(id, request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param {String} id The ID of the ride
     * @param {module:model/RatingRequest} request The rating and optional feedback
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'setRideRatingWithHttpInfo',
    value: function setRideRatingWithHttpInfo(id, request) {
      var postBody = request;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideRating");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideRating");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['User Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi('/rides/{id}/rating', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param {String} id The ID of the ride
     * @param {module:model/RatingRequest} request The rating and optional feedback
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'setRideRating',
    value: function setRideRating(id, request) {
      return this.setRideRatingWithHttpInfo(id, request).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return UserApi;
}();

exports.default = UserApi;