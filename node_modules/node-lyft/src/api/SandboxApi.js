/**
 * Lyft API
 * Drive your app to success with Lyft's API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import SandboxDriverAvailability from '../model/SandboxDriverAvailability';
import SandboxPrimetime from '../model/SandboxPrimetime';
import SandboxRideStatus from '../model/SandboxRideStatus';
import SandboxRideType from '../model/SandboxRideType';
import SandboxRideUpdate from '../model/SandboxRideUpdate';

/**
* Sandbox service.
* @module api/SandboxApi
* @version 1.0.0
*/
export default class SandboxApi {

    /**
    * Constructs a new SandboxApi. 
    * @alias module:api/SandboxApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param {module:model/SandboxPrimetime} request Prime Time to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setPrimeTimeWithHttpInfo(request) {
      let postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setPrimeTime");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sandbox/primetime', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param {module:model/SandboxPrimetime} request Prime Time to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setPrimeTime(request) {
      return this.setPrimeTimeWithHttpInfo(request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param {String} id The ID of the ride
     * @param {module:model/SandboxRideStatus} request status to propagate the ride into
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SandboxRideUpdate} and HTTP response
     */
    setRideStatusWithHttpInfo(id, request) {
      let postBody = request;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideStatus");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideStatus");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxRideUpdate;

      return this.apiClient.callApi(
        '/sandbox/rides/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param {String} id The ID of the ride
     * @param {module:model/SandboxRideStatus} request status to propagate the ride into
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SandboxRideUpdate}
     */
    setRideStatus(id, request) {
      return this.setRideStatusWithHttpInfo(id, request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param {module:model/String} rideType 
     * @param {module:model/SandboxDriverAvailability} request Driver availability to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setRideTypeAvailabilityWithHttpInfo(rideType, request) {
      let postBody = request;

      // verify the required parameter 'rideType' is set
      if (rideType === undefined || rideType === null) {
        throw new Error("Missing the required parameter 'rideType' when calling setRideTypeAvailability");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypeAvailability");
      }


      let pathParams = {
        'ride_type': rideType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sandbox/ridetypes/{ride_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param {module:model/String} rideType 
     * @param {module:model/SandboxDriverAvailability} request Driver availability to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setRideTypeAvailability(rideType, request) {
      return this.setRideTypeAvailabilityWithHttpInfo(rideType, request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param {module:model/SandboxRideType} request Ridetypes to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SandboxRideType} and HTTP response
     */
    setRideTypesWithHttpInfo(request) {
      let postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypes");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxRideType;

      return this.apiClient.callApi(
        '/sandbox/ridetypes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param {module:model/SandboxRideType} request Ridetypes to be preset in the region surrounding the lat, lng
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SandboxRideType}
     */
    setRideTypes(request) {
      return this.setRideTypesWithHttpInfo(request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
